diff --git a/docs/agents/claude-code/hooks[official][08132025].md b/docs/agents/claude-code/hooks[official][08132025].md
index 91e4caa..d2d551e 100644
--- a/docs/agents/claude-code/hooks[official][08132025].md
+++ b/docs/agents/claude-code/hooks[official][08132025].md
@@ -1,5 +1,3 @@
-<!-- https://docs.anthropic.com/en/docs/claude-code/hooks.md -->
-
 # Hooks reference
 
 > This page provides reference documentation for implementing hooks in Claude Code.
@@ -163,6 +161,19 @@ development context like existing issues or recent changes to your codebase.
 - `startup` - Invoked from startup
 - `resume` - Invoked from `--resume`, `--continue`, or `/resume`
 - `clear` - Invoked from `/clear`
+- `compact` - Invoked from auto or manual compact.
+
+### SessionEnd
+
+Runs when a Claude Code session ends. Useful for cleanup tasks, logging session
+statistics, or saving session state.
+
+The `reason` field in the hook input will be one of:
+
+- `clear` - Session cleared with /clear command
+- `logout` - User logged out
+- `prompt_input_exit` - User exited while prompt input was visible
+- `other` - Other exit reasons
 
 ## Hook Input
 
@@ -287,6 +298,18 @@ For `manual`, `custom_instructions` comes from what the user passes into
 }
 ```
 
+### SessionEnd Input
+
+```json
+{
+  "session_id": "abc123",
+  "transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
+  "cwd": "/Users/...",
+  "hook_event_name": "SessionEnd",
+  "reason": "exit"
+}
+```
+
 ## Hook Output
 
 There are two ways for hooks to return output back to Claude Code. The output
@@ -322,6 +345,7 @@ Hooks communicate status through exit codes, stdout, and stderr:
 | `SubagentStop`     | Blocks stoppage, shows stderr to Claude subagent                   |
 | `PreCompact`       | N/A, shows stderr to user only                                     |
 | `SessionStart`     | N/A, shows stderr to user only                                     |
+| `SessionEnd`       | N/A, shows stderr to user only                                     |
 
 ### Advanced: JSON Output
 
@@ -334,8 +358,10 @@ All hook types can include these optional fields:
 ```json
 {
   "continue": true, // Whether Claude should continue after hook execution (default: true)
-  "stopReason": "string" // Message shown when continue is false
+  "stopReason": "string", // Message shown when continue is false
+
   "suppressOutput": true, // Hide stdout from transcript mode (default: false)
+  "systemMessage": "string" // Optional warning message shown to the user
 }
 ```
 
@@ -359,10 +385,9 @@ to Claude.
 `PreToolUse` hooks can control whether a tool call proceeds.
 
 - `"allow"` bypasses the permission system. `permissionDecisionReason` is shown
-  to the user but not to Claude. (_Deprecated `"approve"` value + `reason` has
-  the same behavior._)
+  to the user but not to Claude.
 - `"deny"` prevents the tool call from executing. `permissionDecisionReason` is
-  shown to Claude. (_`"block"` value + `reason` has the same behavior._)
+  shown to Claude.
 - `"ask"` asks the user to confirm the tool call in the UI.
   `permissionDecisionReason` is shown to the user but not to Claude.
 
@@ -371,24 +396,34 @@ to Claude.
   "hookSpecificOutput": {
     "hookEventName": "PreToolUse",
     "permissionDecision": "allow" | "deny" | "ask",
-    "permissionDecisionReason": "My reason here (shown to user)"
-  },
-  "decision": "approve" | "block" | undefined, // Deprecated for PreToolUse but still supported
-  "reason": "Explanation for decision" // Deprecated for PreToolUse but still supported
+    "permissionDecisionReason": "My reason here"
+  }
 }
 ```
 
+<Note>
+  The `decision` and `reason` fields are deprecated for PreToolUse hooks.
+  Use `hookSpecificOutput.permissionDecision` and
+  `hookSpecificOutput.permissionDecisionReason` instead. The deprecated fields
+  `"approve"` and `"block"` map to `"allow"` and `"deny"` respectively.
+</Note>
+
 #### `PostToolUse` Decision Control
 
-`PostToolUse` hooks can control whether a tool call proceeds.
+`PostToolUse` hooks can provide feedback to Claude after tool execution.
 
 - `"block"` automatically prompts Claude with `reason`.
 - `undefined` does nothing. `reason` is ignored.
+- `"hookSpecificOutput.additionalContext"` adds context for Claude to consider.
 
 ```json
 {
   "decision": "block" | undefined,
-  "reason": "Explanation for decision"
+  "reason": "Explanation for decision",
+  "hookSpecificOutput": {
+    "hookEventName": "PostToolUse",
+    "additionalContext": "Additional information for Claude"
+  }
 }
 ```
 
@@ -433,6 +468,7 @@ to Claude.
 `SessionStart` hooks allow you to load in context at the start of a session.
 
 - `"hookSpecificOutput.additionalContext"` adds the string to the context.
+- Multiple hooks' `additionalContext` values are concatenated.
 
 ```json
 {
@@ -443,6 +479,11 @@ to Claude.
 }
 ```
 
+#### `SessionEnd` Decision Control
+
+`SessionEnd` hooks run when a session ends. They cannot block session termination
+but can perform cleanup tasks.
+
 #### Exit Code Example: Bash Command Validation
 
 ```python
@@ -684,13 +725,15 @@ This prevents malicious hook modifications from affecting your current session.
 - **Timeout**: 60-second execution limit by default, configurable per command.
   - A timeout for an individual command does not affect the other commands.
 - **Parallelization**: All matching hooks run in parallel
+- **Deduplication**: Multiple identical hook commands are deduplicated automatically
 - **Environment**: Runs in current directory with Claude Code's environment
   - The `CLAUDE_PROJECT_DIR` environment variable is available and contains the
-    absolute path to the project root directory
+    absolute path to the project root directory (where Claude Code was started)
 - **Input**: JSON via stdin
 - **Output**:
-  - PreToolUse/PostToolUse/Stop: Progress shown in transcript (Ctrl-R)
-  - Notification: Logged to debug only (`--debug`)
+  - PreToolUse/PostToolUse/Stop/SubagentStop: Progress shown in transcript (Ctrl-R)
+  - Notification/SessionEnd: Logged to debug only (`--debug`)
+  - UserPromptSubmit/SessionStart: stdout added as context for Claude
 
 ## Debugging
 
