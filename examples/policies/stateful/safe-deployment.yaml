# Safe Deployment Workflow Policies
# Ensure all checks pass before deploying to production

policies:
  # Comprehensive deployment checklist
  - name: deployment-readiness-check
    description: Verify all requirements are met before production deployment
    hook_event: UserPromptSubmit
    matcher: "*"
    conditions:
      # User wants to deploy to production
      - type: pattern
        field: prompt
        regex: "(?i)(deploy|release|ship).*(prod|production|live)"
      # All checks must pass
      - type: and
        conditions:
          # Tests must have passed recently
          - type: state_query
            filter:
              tool: Bash
              command_contains: "test"
              result: success
              within_minutes: 30
          # Linting must have passed
          - type: state_query
            filter:
              tool: Bash
              command_contains: "lint"
              result: success
              within_minutes: 30
          # Build must be fresh
          - type: state_query
            filter:
              tool: Bash
              command_contains: "build"
              result: success
              within_minutes: 15
          # No force pushes in last 24 hours
          - type: not
            condition:
              type: state_query
              filter:
                tool: Bash
                command_contains: "push --force"
                within_minutes: 1440
    action:
      type: inject_context
      context: |
        ‚úÖ Production Deployment Checklist - ALL CLEAR!
        
        ‚úì Tests: Passed (within 30 minutes)
        ‚úì Linting: Passed (within 30 minutes)
        ‚úì Build: Fresh (within 15 minutes)
        ‚úì Repository: No recent force pushes
        
        You're ready to deploy to production! Good luck! üöÄ
      use_stdout: true

  # Block deployment if checks haven't passed
  - name: deployment-safety-block
    description: Prevent unsafe deployments
    hook_event: PreToolUse
    matcher: Bash
    conditions:
      # Deployment command detected
      - type: pattern
        field: tool_input.command
        regex: "(deploy|kubectl|terraform|ansible).*(prod|production)"
      # Missing required checks
      - type: or
        conditions:
          # No recent tests
          - type: not
            condition:
              type: state_query
              filter:
                tool: Bash
                command_contains: "test"
                result: success
                within_minutes: 60
          # No recent build
          - type: not
            condition:
              type: state_query
              filter:
                tool: Bash
                command_contains: "build"
                result: success
                within_minutes: 30
    action:
      type: block_with_feedback
      feedback: |
        üõë DEPLOYMENT BLOCKED - Safety checks not met!
        
        Before deploying to production, please ensure:
        1. Run and pass all tests (within last hour)
        2. Create a fresh build (within last 30 minutes)
        
        This policy helps prevent broken deployments.

  # Warn about config changes before deployment
  - name: config-change-deployment-warning
    description: Alert about recent configuration changes
    hook_event: UserPromptSubmit
    matcher: "*"
    conditions:
      - type: pattern
        field: prompt
        regex: "(?i)(deploy|release)"
      # Check if config files were recently edited
      - type: or
        conditions:
          - type: state_query
            filter:
              tool: Edit
              result: success
              within_minutes: 120
          - type: state_query
            filter:
              tool: Write
              result: success
              within_minutes: 120
    action:
      type: inject_context
      context: |
        ‚ö†Ô∏è  Configuration File Changes Detected
        
        You've modified files in the last 2 hours. Before deploying:
        
        1. Double-check environment variables
        2. Verify secrets are properly configured
        3. Test configuration in staging first
        4. Ensure backward compatibility
        
        Configuration errors are a common cause of deployment failures.
      use_stdout: true

  # Staging deployment encouragement
  - name: staging-first-reminder
    description: Encourage staging deployment before production
    hook_event: UserPromptSubmit
    matcher: "*"
    conditions:
      # Want to deploy to production
      - type: pattern
        field: prompt
        regex: "(?i)deploy.*(prod|production)"
      # Haven't deployed to staging recently
      - type: not
        condition:
          type: state_query
          filter:
            tool: Bash
            command_contains: "deploy.*staging"
            result: success
            within_minutes: 60
    action:
      type: inject_context
      context: |
        üí° Best Practice Reminder: Deploy to Staging First
        
        No recent staging deployment detected. Consider:
        1. Deploy to staging environment
        2. Run smoke tests
        3. Verify everything works
        4. Then deploy to production
        
        This reduces the risk of production issues.
      use_stdout: true