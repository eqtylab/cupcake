//! YAML file writer for generating stub policy files

use std::fs;
use std::path::{Path, PathBuf};
use crate::Result;

/// Generate stub YAML files based on the wizard configuration
pub fn generate_stub_files(output_dir: &Path, rule_count: usize) -> Result<()> {
    // Create directory structure
    let policies_dir = output_dir.join("policies");
    fs::create_dir_all(&policies_dir)?;
    
    // Write main cupcake.yaml
    let main_config = r#"# Cupcake Configuration
# Generated by Cupcake TUI Wizard

settings:
  # Enable structured audit logging for policy decisions
  audit_logging: true
  
  # Disable debug mode for production use
  debug_mode: false

# Import patterns for policy fragment files
# Files are processed in alphabetical order for deterministic behavior
imports:
  - "policies/*.yaml"
"#;
    
    fs::write(output_dir.join("cupcake.yaml"), main_config)?;
    
    // Write stub policy files
    if rule_count > 0 {
        // Pre-commit policies
        let pre_commit_policies = r#"# Pre-Commit Policies
# This is a stub file - actual policies will be generated from extracted rules

PreCommit:
  - name: "Example Test Reminder"
    description: "Stub rule for demonstration"
    conditions:
      - type: "pattern"
        field: "message"
        regex: "TODO"
    action:
      type: "provide_feedback"
      message: "This is a placeholder policy"
"#;
        fs::write(policies_dir.join("00-pre-commit.yaml"), pre_commit_policies)?;
        
        // Tool use policies
        let tool_policies = r#"# Tool Use Policies
# This is a stub file - actual policies will be generated from extracted rules

PreToolUse:
  "Bash":
    - name: "Example Command Check"
      description: "Stub rule for demonstration"
      conditions:
        - type: "pattern"
          field: "tool_input.command"
          regex: "example"
      action:
        type: "provide_feedback"
        message: "This is a placeholder policy"
"#;
        fs::write(policies_dir.join("01-tools.yaml"), tool_policies)?;
        
        // File policies
        let file_policies = r#"# File Operation Policies
# This is a stub file - actual policies will be generated from extracted rules

PostToolUse:
  "Write|Edit":
    - name: "Example File Check"
      description: "Stub rule for demonstration"
      conditions:
        - type: "pattern"
          field: "tool_input.file_path"
          regex: "\\.txt$"
      action:
        type: "provide_feedback"
        message: "This is a placeholder policy"
"#;
        fs::write(policies_dir.join("02-files.yaml"), file_policies)?;
    }
    
    Ok(())
}

/// Get the output directory path for the YAML files
pub fn get_output_dir() -> PathBuf {
    PathBuf::from("guardrails")
}