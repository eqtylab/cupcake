schema_version = "1.0"

[settings]
debug_mode = true

# Test 1: PreToolUse soft feedback - only visible in transcript
[[policies]]
name = "Echo Command Transcript Feedback"
hook_event = "PreToolUse"
matcher = "Bash"
conditions = [
  { type = "pattern", field = "tool_input.command", regex = "^echo\\b" }
]
action = { type = "provide_feedback", message = "‚ÑπÔ∏è [Transcript Only] Echo command detected - this appears only in transcript mode (Ctrl-R)", include_context = false }

# Test 2: PostToolUse soft feedback - Claude sees this!
[[policies]]
name = "Echo Command Claude Feedback"
hook_event = "PostToolUse"
matcher = "Bash"
conditions = [
  { type = "pattern", field = "tool_input.command", regex = "^echo\\b" }
]
action = { type = "provide_feedback", message = "üí° Consider using printf instead of echo for better portability across different shells.", include_context = false }

# Test 3: PreToolUse hard block - prevents execution
[[policies]]
name = "Block Dangerous Commands"
hook_event = "PreToolUse"
matcher = "Bash"
conditions = [
  { type = "pattern", field = "tool_input.command", regex = "^(rm|dd|format)\\s" }
]
action = { type = "block_with_feedback", feedback_message = "üö´ Dangerous command blocked for safety!", include_context = true }

# Test 4: PostToolUse feedback for file operations
[[policies]]
name = "Python File Best Practices"
hook_event = "PostToolUse"
matcher = "Write|Edit"
conditions = [
  { type = "pattern", field = "tool_input.file_path", regex = "\\.py$" }
]
action = { type = "provide_feedback", message = "üêç Python file modified. Remember to run black for formatting and mypy for type checking!", include_context = false }

# Test 5: Read operation tracking (PreToolUse, transcript only)
[[policies]]
name = "Track Markdown Reads"
hook_event = "PreToolUse"
matcher = "Read"
conditions = [
  { type = "pattern", field = "tool_input.file_path", regex = "\\.md$" }
]
action = { type = "provide_feedback", message = "üìñ [Transcript] Reading markdown file", include_context = false }

# Test 6: Block .txt file creation - hard block for testing
[[policies]]
name = "Block TXT File Creation"
hook_event = "PreToolUse"
matcher = "Write"
conditions = [
  { type = "pattern", field = "tool_input.file_path", regex = "\\.txt$" }
]
action = { type = "block_with_feedback", feedback_message = "üö´ Creating .txt files is not allowed in this test environment!", include_context = false }

# Test 7: Block cat command usage - suggest using Read tool instead
[[policies]]
name = "Block Cat Command"
hook_event = "PreToolUse"
matcher = "Bash"
conditions = [
  { type = "pattern", field = "tool_input.command", regex = "^cat\\s" }
]
action = { type = "block_with_feedback", feedback_message = "üö´ Use Read tool instead of cat command for better file access control.", include_context = false }